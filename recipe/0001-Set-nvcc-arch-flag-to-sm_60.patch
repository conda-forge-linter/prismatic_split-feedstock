diff --git a/CMakeLists.txt b/CMakeLists.txt
index c7791812..b41b9e4d 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -23,7 +23,7 @@ set(PRISMATIC_USE_HDF5_STATIC 0 CACHE BOOL PRISMATIC_USE_HDF5_STATIC)
 
 #set (CMAKE_BUILD_TYPE DEBUG)
 if (PRISMATIC_ENABLE_GPU)
-    set(NVCC_FLAGS_EXTRA "-arch=sm_30 -std=c++11 -Xcompiler -fPIC")
+    set(NVCC_FLAGS_EXTRA "-arch=sm_60 -std=c++11 -Xcompiler -fPIC")
 endif (PRISMATIC_ENABLE_GPU)
 set(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/modules)

diff --git a/include/utility.cuh b/include/utility.cuh
index 4ddac556..81e7b87b 100644
--- a/include/utility.cuh
+++ b/include/utility.cuh
@@ -216,8 +216,5 @@ __global__ void DPC_denominator_reduce(const float* psiIntensity_ds,
 //size_t getNextPower2(const float& val);
 size_t getNextPower2(const size_t& val);
 
-#if __CUDA_ARCH__ < 600
-__device__  double atomicAdd_double(double* address, const double val);
-#endif
 //__global__ void shiftIndices(size_t* vec, const size_t* vec_in, double by, const size_t N);
#endif // PRISMATIC_UTILITY_CUH

diff --git a/src/utility.cu b/src/utility.cu
index b48ceb85..e488323b 100644
--- a/src/utility.cu
+++ b/src/utility.cu
@@ -31,28 +31,6 @@ __device__ __constant__ cuDoubleComplex i           = {0, 1};
 __device__ __constant__ cuDoubleComplex pi_cx       = {PI, 0};
 __device__ __constant__ cuDoubleComplex minus_2pii  = {0, -2*PI};
 
-//atomicAdd for doubles on devices with compute capability < 6. This is directly copied from the CUDA Programming Guide
-#if __CUDA_ARCH__ < 600
-__device__  double atomicAdd_double(double* address, const double val)
-{
-	unsigned long long int* address_as_ull =
-			(unsigned long long int*)address;
-	unsigned long long int old = *address_as_ull, assumed;
-
-	do {
-		assumed = old;
-		old = atomicCAS(address_as_ull, assumed,
-		                __double_as_longlong(val +
-		                                     __longlong_as_double(assumed)));
-
-//		 Note: uses integer comparison to avoid hang in case of NaN (since NaN != NaN)
-	} while (assumed != old);
-
-	return __longlong_as_double(old);
-}
-#endif
-
-
 
 // computes exp(real(a) + i * imag(a))
 __device__ __forceinline__ cuDoubleComplex exp_cx(const cuDoubleComplex a){
@@ -425,8 +403,7 @@ __global__ void integrateDetector(const double* psiIntensity_ds,
 	if (idx < N) {
 		size_t alpha = (size_t)alphaInd_d[idx];
 		if (alpha <= num_integration_bins)
-			//atomicAdd(&integratedOutput[alpha-1], psiIntensity_ds[idx]);
-			atomicAdd_double(&integratedOutput[alpha-1], psiIntensity_ds[idx]);
+			atomicAdd(&integratedOutput[alpha-1], psiIntensity_ds[idx]);
 	}
 }
 
@@ -446,7 +423,7 @@ __global__ void DPC_numerator_reduce(const double* psiIntensity_ds,
 									 const size_t N){
 	int idx = threadIdx.x + blockDim.x * blockIdx.x;
 		if (idx < N){
-			atomicAdd_double(&numerator[0], psiIntensity_ds[idx]*q_coord[idx]);
+			atomicAdd(&numerator[0], psiIntensity_ds[idx]*q_coord[idx]);
 		}
 }
 
@@ -464,7 +441,7 @@ __global__ void DPC_denominator_reduce(const double* psiIntensity_ds,
 									   const size_t N){
 	int idx = threadIdx.x + blockDim.x * blockIdx.x;
 	if (idx < N){
-		atomicAdd_double(&denominator[0], psiIntensity_ds[idx]);
+		atomicAdd(&denominator[0], psiIntensity_ds[idx]);
 	}			
 }

