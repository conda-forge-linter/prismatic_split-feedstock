diff --git a/CMakeLists.txt b/CMakeLists.txt
index c7791812..b324a263 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -70,7 +70,27 @@ endif (PRISMATIC_ENABLE_GPU)
 # find core packages
 find_package (Threads REQUIRED)
 find_package (Boost REQUIRED)
-find_package (FFTW3 REQUIRED)
+
+if(PRISMATIC_ENABLE_DOUBLE_PRECISION)
+	if(UNIX)
+		set(FFTW_FIND_COMPONENTS "DOUBLE_LIB" "DOUBLE_THREADS_LIB")
+	else(UNIX)
+		set(FFTW_FIND_COMPONENTS "DOUBLE_LIB")
+	endif(UNIX)
+else(PRISMATIC_ENABLE_DOUBLE_PRECISION)
+	if(UNIX)
+		set(FFTW_FIND_COMPONENTS "FLOAT_LIB" "FLOAT_THREADS_LIB")
+	else(UNIX)
+		set(FFTW_FIND_COMPONENTS "FLOAT_LIB")
+	endif(UNIX)
+endif(PRISMATIC_ENABLE_DOUBLE_PRECISION)
+find_package (FFTW REQUIRED COMPONENTS ${FFTW_FIND_COMPONENTS})
+
+if(FFTW_FOUND)
+	message("Found FFTW: ${FFTW_LIBRARIES}")
+else(FFTW_FOUND)
+    message("Could not find FFTW library")
+endif(FFTW_FOUND)
 
 if(PRISMATIC_ENABLE_PYPRISMATIC)
     find_package (PythonInterp 3.5 REQUIRED)
@@ -94,7 +114,7 @@ set(HDF5_LIBRARIES ${HDF5_C_HL_LIBRARIES} ${HDF5_C_LIBRARIES} ${HDF5_CXX_HL_LIBR
 message("Boost dir " ${Boost_INCLUDE_DIRS})
 include_directories(${CMAKE_SOURCE_DIR}/include
                     ${Boost_INCLUDE_DIRS}
-                    ${FFTW_INCLUDE_DIR}
+                    ${FFTW_INCLUDE_DIRS}
                     ${HDF5_INCLUDE_DIRS})
 # find CUDA package, if building for GPU
 if (PRISMATIC_ENABLE_GPU)
@@ -111,8 +131,11 @@ endif (PRISMATIC_ENABLE_GUI)
 
 # add preprocessor directives based on configuration
 if (PRISMATIC_ENABLE_DOUBLE_PRECISION)
+	message("Double precision enabled")
     add_definitions(-DPRISMATIC_ENABLE_DOUBLE_PRECISION)
-endif (PRISMATIC_ENABLE_DOUBLE_PRECISION)
+else (PRISMATIC_ENABLE_DOUBLE_PRECISION)
+	message("Single precision enabled")
+endif (PRISMATIC_ENABLE_DOUBLE_PRECISION) 
 
 if (PRISMATIC_ENABLE_GUI)
     add_definitions(-DPRISMATIC_ENABLE_GUI)
@@ -126,26 +149,6 @@ if (PRISMATIC_ENABLE_CLI)
     add_definitions(-DPRISMATIC_ENABLE_CLI)
 endif (PRISMATIC_ENABLE_CLI)
 
-# setup FFTW based on desired precision
-if (NOT PRISMATIC_ENABLE_DOUBLE_PRECISION)
-    message("Single precision enabled")
-    if (UNIX)
-	    message(UNIX)
-	    set(FFTW_LIBRARIES ${FFTW_EXECUTABLE_LIBRARIES})
-	    set(FFTW_LIBRARIES fftw3f fftw3f_threads)
-            set(FFTW_LIBRARY ${FFTW_EXECUTABLE_LIBRARIES})
-	    message("FFTW_EXECUTABLE_LIBRARIES = " ${FFTW_EXECUTABLE_LIBRARIES})
-	    message("FFTW_LIBRARY = " ${FFTW_LIBRARY})
-    endif (UNIX)
-else(NOT PRISMATIC_ENABLE_DOUBLE_PRECISION)
-    message("Double precision enabled")
-    add_definitions(-DPRISMATIC_ENABLE_DOUBLE_PRECISION)
-	if (FFTW_THREADS_LIBRARY)
-    		set(FFTW_LIBRARIES ${FFTW_LIBRARY} ${FFTW_THREADS_LIBRARY})
-    	endif(FFTW_THREADS_LIBRARY)
-endif(NOT PRISMATIC_ENABLE_DOUBLE_PRECISION)
-
-
 
 if (PRISMATIC_ENABLE_CLI)
     # build CLI
diff --git a/cmake/modules/FindFFTW.cmake b/cmake/modules/FindFFTW.cmake
new file mode 100644
index 00000000..3c30613e
--- /dev/null
+++ b/cmake/modules/FindFFTW.cmake
@@ -0,0 +1,339 @@
+# - Find the FFTW library
+#
+# Original version of this file:
+#   Copyright (c) 2015, Wenzel Jakob
+#   https://github.com/wjakob/layerlab/blob/master/cmake/FindFFTW.cmake, commit 4d58bfdc28891b4f9373dfe46239dda5a0b561c6
+# Modifications:
+#   Copyright (c) 2017, Patrick Bos
+#
+# Usage:
+#   find_package(FFTW [REQUIRED] [QUIET] [COMPONENTS component1 ... componentX] )
+#
+# It sets the following variables:
+#   FFTW_FOUND                  ... true if fftw is found on the system
+#   FFTW_[component]_LIB_FOUND  ... true if the component is found on the system (see components below)
+#   FFTW_LIBRARIES              ... full paths to all found fftw libraries
+#   FFTW_[component]_LIB        ... full path to one of the components (see below)
+#   FFTW_INCLUDE_DIRS           ... fftw include directory paths
+#
+# The following variables will be checked by the function
+#   FFTW_USE_STATIC_LIBS        ... if true, only static libraries are found, otherwise both static and shared.
+#   FFTW_ROOT                   ... if set, the libraries are exclusively searched
+#                                   under this path
+#
+# This package supports the following components:
+#   FLOAT_LIB
+#   DOUBLE_LIB
+#   LONGDOUBLE_LIB
+#   FLOAT_THREADS_LIB
+#   DOUBLE_THREADS_LIB
+#   LONGDOUBLE_THREADS_LIB
+#   FLOAT_OPENMP_LIB
+#   DOUBLE_OPENMP_LIB
+#   LONGDOUBLE_OPENMP_LIB
+#
+
+# TODO (maybe): extend with ExternalProject download + build option
+# TODO: put on conda-forge
+
+
+if( NOT FFTW_ROOT AND DEFINED ENV{FFTWDIR} )
+  set( FFTW_ROOT $ENV{FFTWDIR} )
+endif()
+
+# Check if we can use PkgConfig
+find_package(PkgConfig)
+
+#Determine from PKG
+if( PKG_CONFIG_FOUND AND NOT FFTW_ROOT )
+  pkg_check_modules( PKG_FFTW QUIET "fftw3" )
+endif()
+
+#Check whether to search static or dynamic libs
+set( CMAKE_FIND_LIBRARY_SUFFIXES_SAV ${CMAKE_FIND_LIBRARY_SUFFIXES} )
+
+if( ${FFTW_USE_STATIC_LIBS} )
+  set( CMAKE_FIND_LIBRARY_SUFFIXES ${CMAKE_STATIC_LIBRARY_SUFFIX} )
+else()
+  set( CMAKE_FIND_LIBRARY_SUFFIXES ${CMAKE_FIND_LIBRARY_SUFFIXES_SAV} )
+endif()
+
+if( FFTW_ROOT )
+  # find libs
+
+  find_library(
+    FFTW_DOUBLE_LIB
+    NAMES "fftw3" libfftw3-3
+    PATHS ${FFTW_ROOT}
+    PATH_SUFFIXES "lib" "lib64"
+    NO_DEFAULT_PATH
+  )
+
+  find_library(
+    FFTW_DOUBLE_THREADS_LIB
+    NAMES "fftw3_threads"
+    PATHS ${FFTW_ROOT}
+    PATH_SUFFIXES "lib" "lib64"
+    NO_DEFAULT_PATH
+  )
+
+  find_library(
+          FFTW_DOUBLE_OPENMP_LIB
+          NAMES "fftw3_omp"
+          PATHS ${FFTW_ROOT}
+          PATH_SUFFIXES "lib" "lib64"
+          NO_DEFAULT_PATH
+  )
+
+  find_library(
+    FFTW_FLOAT_LIB
+    NAMES "fftw3f" libfftw3f-3
+    PATHS ${FFTW_ROOT}
+    PATH_SUFFIXES "lib" "lib64"
+    NO_DEFAULT_PATH
+  )
+
+  find_library(
+    FFTW_FLOAT_THREADS_LIB
+    NAMES "fftw3f_threads"
+    PATHS ${FFTW_ROOT}
+    PATH_SUFFIXES "lib" "lib64"
+    NO_DEFAULT_PATH
+  )
+
+  find_library(
+          FFTW_FLOAT_OPENMP_LIB
+          NAMES "fftw3f_omp"
+          PATHS ${FFTW_ROOT}
+          PATH_SUFFIXES "lib" "lib64"
+          NO_DEFAULT_PATH
+  )
+
+  find_library(
+    FFTW_LONGDOUBLE_LIB
+    NAMES "fftw3l" libfftw3l-3
+    PATHS ${FFTW_ROOT}
+    PATH_SUFFIXES "lib" "lib64"
+    NO_DEFAULT_PATH
+  )
+
+  find_library(
+    FFTW_LONGDOUBLE_THREADS_LIB
+    NAMES "fftw3l_threads"
+    PATHS ${FFTW_ROOT}
+    PATH_SUFFIXES "lib" "lib64"
+    NO_DEFAULT_PATH
+  )
+
+  find_library(
+          FFTW_LONGDOUBLE_OPENMP_LIB
+          NAMES "fftw3l_omp"
+          PATHS ${FFTW_ROOT}
+          PATH_SUFFIXES "lib" "lib64"
+          NO_DEFAULT_PATH
+  )
+
+  #find includes
+  find_path(FFTW_INCLUDE_DIRS
+    NAMES "fftw3.h"
+    PATHS ${FFTW_ROOT}
+    PATH_SUFFIXES "include"
+    NO_DEFAULT_PATH
+  )
+
+else()
+
+  find_library(
+    FFTW_DOUBLE_LIB
+    NAMES "fftw3"
+    PATHS ${PKG_FFTW_LIBRARY_DIRS} ${LIB_INSTALL_DIR}
+  )
+
+  find_library(
+    FFTW_DOUBLE_THREADS_LIB
+    NAMES "fftw3_threads"
+    PATHS ${PKG_FFTW_LIBRARY_DIRS} ${LIB_INSTALL_DIR}
+  )
+
+  find_library(
+          FFTW_DOUBLE_OPENMP_LIB
+          NAMES "fftw3_omp"
+          PATHS ${PKG_FFTW_LIBRARY_DIRS} ${LIB_INSTALL_DIR}
+  )
+
+  find_library(
+    FFTW_FLOAT_LIB
+    NAMES "fftw3f"
+    PATHS ${PKG_FFTW_LIBRARY_DIRS} ${LIB_INSTALL_DIR}
+  )
+
+  find_library(
+    FFTW_FLOAT_THREADS_LIB
+    NAMES "fftw3f_threads"
+    PATHS ${PKG_FFTW_LIBRARY_DIRS} ${LIB_INSTALL_DIR}
+  )
+
+  find_library(
+          FFTW_FLOAT_OPENMP_LIB
+          NAMES "fftw3f_omp"
+          PATHS ${PKG_FFTW_LIBRARY_DIRS} ${LIB_INSTALL_DIR}
+  )
+
+  find_library(
+    FFTW_LONGDOUBLE_LIB
+    NAMES "fftw3l"
+    PATHS ${PKG_FFTW_LIBRARY_DIRS} ${LIB_INSTALL_DIR}
+  )
+
+  find_library(
+    FFTW_LONGDOUBLE_THREADS_LIB
+    NAMES "fftw3l_threads"
+    PATHS ${PKG_FFTW_LIBRARY_DIRS} ${LIB_INSTALL_DIR}
+  )
+
+  find_library(FFTW_LONGDOUBLE_OPENMP_LIB
+          NAMES "fftw3l_omp"
+          PATHS ${PKG_FFTW_LIBRARY_DIRS} ${LIB_INSTALL_DIR}
+  )
+
+  find_path(FFTW_INCLUDE_DIRS
+    NAMES "fftw3.h"
+    PATHS ${PKG_FFTW_INCLUDE_DIRS} ${INCLUDE_INSTALL_DIR}
+  )
+
+endif( FFTW_ROOT )
+
+#--------------------------------------- components
+
+if (FFTW_DOUBLE_LIB)
+  set(FFTW_DOUBLE_LIB_FOUND TRUE)
+  set(FFTW_LIBRARIES ${FFTW_LIBRARIES} ${FFTW_DOUBLE_LIB})
+  add_library(FFTW::Double INTERFACE IMPORTED)
+  set_target_properties(FFTW::Double
+    PROPERTIES INTERFACE_INCLUDE_DIRECTORIES "${FFTW_INCLUDE_DIRS}"
+               INTERFACE_LINK_LIBRARIES "${FFTW_DOUBLE_LIB}"
+  )
+else()
+  set(FFTW_DOUBLE_LIB_FOUND FALSE)
+endif()
+
+if (FFTW_FLOAT_LIB)
+  set(FFTW_FLOAT_LIB_FOUND TRUE)
+  set(FFTW_LIBRARIES ${FFTW_LIBRARIES} ${FFTW_FLOAT_LIB})
+  add_library(FFTW::Float INTERFACE IMPORTED)
+  set_target_properties(FFTW::Float
+    PROPERTIES INTERFACE_INCLUDE_DIRECTORIES "${FFTW_INCLUDE_DIRS}"
+               INTERFACE_LINK_LIBRARIES "${FFTW_FLOAT_LIB}"
+  )
+else()
+  set(FFTW_FLOAT_LIB_FOUND FALSE)
+endif()
+
+if (FFTW_LONGDOUBLE_LIB)
+  set(FFTW_LONGDOUBLE_LIB_FOUND TRUE)
+  set(FFTW_LIBRARIES ${FFTW_LIBRARIES} ${FFTW_LONGDOUBLE_LIB})
+  add_library(FFTW::LongDouble INTERFACE IMPORTED)
+  set_target_properties(FFTW::LongDouble
+    PROPERTIES INTERFACE_INCLUDE_DIRECTORIES "${FFTW_INCLUDE_DIRS}"
+               INTERFACE_LINK_LIBRARIES "${FFTW_LONGDOUBLE_LIB}"
+  )
+else()
+  set(FFTW_LONGDOUBLE_LIB_FOUND FALSE)
+endif()
+
+if (FFTW_DOUBLE_THREADS_LIB)
+  set(FFTW_DOUBLE_THREADS_LIB_FOUND TRUE)
+  set(FFTW_LIBRARIES ${FFTW_LIBRARIES} ${FFTW_DOUBLE_THREADS_LIB})
+  add_library(FFTW::DoubleThreads INTERFACE IMPORTED)
+  set_target_properties(FFTW::DoubleThreads
+    PROPERTIES INTERFACE_INCLUDE_DIRECTORIES "${FFTW_INCLUDE_DIRS}"
+               INTERFACE_LINK_LIBRARIES "${FFTW_DOUBLETHREADS_LIB}"
+  )
+else()
+  set(FFTW_DOUBLE_THREADS_LIB_FOUND FALSE)
+endif()
+
+if (FFTW_FLOAT_THREADS_LIB)
+  set(FFTW_FLOAT_THREADS_LIB_FOUND TRUE)
+  set(FFTW_LIBRARIES ${FFTW_LIBRARIES} ${FFTW_FLOAT_THREADS_LIB})
+  add_library(FFTW::FloatThreads INTERFACE IMPORTED)
+  set_target_properties(FFTW::FloatThreads
+    PROPERTIES INTERFACE_INCLUDE_DIRECTORIES "${FFTW_INCLUDE_DIRS}"
+               INTERFACE_LINK_LIBRARIES "${FFTW_FLOAT_THREADS_LIB}"
+  )
+else()
+  set(FFTW_FLOAT_THREADS_LIB_FOUND FALSE)
+endif()
+
+if (FFTW_LONGDOUBLE_THREADS_LIB)
+  set(FFTW_LONGDOUBLE_THREADS_LIB_FOUND TRUE)
+  set(FFTW_LIBRARIES ${FFTW_LIBRARIES} ${FFTW_LONGDOUBLE_THREADS_LIB})
+  add_library(FFTW::LongDoubleThreads INTERFACE IMPORTED)
+  set_target_properties(FFTW::LongDoubleThreads
+    PROPERTIES INTERFACE_INCLUDE_DIRECTORIES "${FFTW_INCLUDE_DIRS}"
+               INTERFACE_LINK_LIBRARIES "${FFTW_LONGDOUBLE_THREADS_LIB}"
+  )
+else()
+  set(FFTW_LONGDOUBLE_THREADS_LIB_FOUND FALSE)
+endif()
+
+if (FFTW_DOUBLE_OPENMP_LIB)
+  set(FFTW_DOUBLE_OPENMP_LIB_FOUND TRUE)
+  set(FFTW_LIBRARIES ${FFTW_LIBRARIES} ${FFTW_DOUBLE_OPENMP_LIB})
+  add_library(FFTW::DoubleOpenMP INTERFACE IMPORTED)
+  set_target_properties(FFTW::DoubleOpenMP
+    PROPERTIES INTERFACE_INCLUDE_DIRECTORIES "${FFTW_INCLUDE_DIRS}"
+               INTERFACE_LINK_LIBRARIES "${FFTW_DOUBLE_OPENMP_LIB}"
+  )
+else()
+  set(FFTW_DOUBLE_OPENMP_LIB_FOUND FALSE)
+endif()
+
+if (FFTW_FLOAT_OPENMP_LIB)
+  set(FFTW_FLOAT_OPENMP_LIB_FOUND TRUE)
+  set(FFTW_LIBRARIES ${FFTW_LIBRARIES} ${FFTW_FLOAT_OPENMP_LIB})
+  add_library(FFTW::FloatOpenMP INTERFACE IMPORTED)
+  set_target_properties(FFTW::FloatOpenMP
+    PROPERTIES INTERFACE_INCLUDE_DIRECTORIES "${FFTW_INCLUDE_DIRS}"
+               INTERFACE_LINK_LIBRARIES "${FFTW_FLOAT_OPENMP_LIB}"
+  )
+else()
+  set(FFTW_FLOAT_OPENMP_LIB_FOUND FALSE)
+endif()
+
+if (FFTW_LONGDOUBLE_OPENMP_LIB)
+  set(FFTW_LONGDOUBLE_OPENMP_LIB_FOUND TRUE)
+  set(FFTW_LIBRARIES ${FFTW_LIBRARIES} ${FFTW_LONGDOUBLE_OPENMP_LIB})
+  add_library(FFTW::LongDoubleOpenMP INTERFACE IMPORTED)
+  set_target_properties(FFTW::LongDoubleOpenMP
+    PROPERTIES INTERFACE_INCLUDE_DIRECTORIES "${FFTW_INCLUDE_DIRS}"
+               INTERFACE_LINK_LIBRARIES "${FFTW_LONGDOUBLE_OPENMP_LIB}"
+  )
+else()
+  set(FFTW_LONGDOUBLE_OPENMP_LIB_FOUND FALSE)
+endif()
+
+#--------------------------------------- end components
+
+set( CMAKE_FIND_LIBRARY_SUFFIXES ${CMAKE_FIND_LIBRARY_SUFFIXES_SAV} )
+
+include(FindPackageHandleStandardArgs)
+
+find_package_handle_standard_args(FFTW
+        REQUIRED_VARS FFTW_INCLUDE_DIRS
+        HANDLE_COMPONENTS
+        )
+
+mark_as_advanced(
+        FFTW_INCLUDE_DIRS
+        FFTW_LIBRARIES
+        FFTW_FLOAT_LIB
+        FFTW_DOUBLE_LIB
+        FFTW_LONGDOUBLE_LIB
+        FFTW_FLOAT_THREADS_LIB
+        FFTW_DOUBLE_THREADS_LIB
+        FFTW_LONGDOUBLE_THREADS_LIB
+        FFTW_FLOAT_OPENMP_LIB
+        FFTW_DOUBLE_OPENMP_LIB
+        FFTW_LONGDOUBLE_OPENMP_LIB
+        )
\ No newline at end of file
diff --git a/cmake/modules/FindFFTW.cmake.saved b/cmake/modules/FindFFTW.cmake.saved
deleted file mode 100644
index 61db6dc6..00000000
--- a/cmake/modules/FindFFTW.cmake.saved
+++ /dev/null
@@ -1,22 +0,0 @@
-# - Find FFTW
-# Find the native FFTW includes and library
-#
-#  FFTW_INCLUDES    - where to find fftw3.h
-#  FFTW_LIBRARIES   - List of libraries when using FFTW.
-#  FFTW_FOUND       - True if FFTW found.
-
-if (FFTW_INCLUDES)
-    # Already in cache, be silent
-    set (FFTW_FIND_QUIETLY TRUE)
-endif (FFTW_INCLUDES)
-
-find_path (FFTW_INCLUDES fftw3.h)
-
-find_library (FFTW_LIBRARIES NAMES fftw3)
-
-# handle the QUIETLY and REQUIRED arguments and set FFTW_FOUND to TRUE if
-# all listed variables are TRUE
-include (FindPackageHandleStandardArgs)
-find_package_handle_standard_args (FFTW DEFAULT_MSG FFTW_LIBRARIES FFTW_INCLUDES)
-
-mark_as_advanced (FFTW_LIBRARIES FFTW_INCLUDES)
diff --git a/cmake/modules/FindFFTW3.cmake b/cmake/modules/FindFFTW3.cmake
deleted file mode 100644
index 8478d194..00000000
--- a/cmake/modules/FindFFTW3.cmake
+++ /dev/null
@@ -1,127 +0,0 @@
-## https://github.com/thierry-sousbie/dice/edit/master/modules/FindFFTW3.cmake
-# - Find FFTW
-# Find the native FFTW includes and library
-# This module defines
-# FFTW_INCLUDE_DIR, where to find fftw3.h, etc.
-# FFTW_LIBRARIES, the libraries needed to use FFTW.
-# FFTW_FOUND, If false, do not try to use FFTW.
-# also defined, but not for general use are
-# FFTW_LIBRARY, where to find the FFTW library.
-
-#UNSET(FFTW_INCLUDE_DIR CACHE)
-#UNSET(FFTW_LIBRARY CACHE)
-#UNSET(FFTW_THREADS_NAMES CACHE)
-#UNSET(FFTW_MPI_LIBRARY CACHE)
-
-FIND_PATH(FFTW_INCLUDE_DIR fftw3.h
-        PATHS ${FFTW3_DIR}
-        PATH_SUFFIXES include
-        DOC "Directory where the FFTW3 header files are located"
-        NO_DEFAULT_PATH
-        )
-
-SET(FFTW_NAMES ${FFTW_NAMES} fftw3 fftw3-3)
-find_library(FFTW_LIBRARY
-        NAMES ${FFTW_NAMES}
-        PATHS ${FFTW3_DIR}
-        PATH_SUFFIXES lib
-        DOC "Directory where the FFTW3 library is located"
-        NO_DEFAULT_PATH
-        )
-
-SET(FFTW_THREADS_NAMES ${FFTW_THREADS_NAMES} fftw3_threads fftw3-3_threads)
-find_library(FFTW_THREADS_LIBRARY
-        NAMES ${FFTW_THREADS_NAMES}
-        PATHS ${FFTW3_DIR}
-        PATH_SUFFIXES lib
-        DOC "Directory where the FFTW3-threads library is located"
-        NO_DEFAULT_PATH
-        )
-
-SET(FFTW_MPI_NAMES ${FFTW_MPI_NAMES} fftw3_mpi fftw3-3_mpi)
-find_library(FFTW_MPI_LIBRARY
-        NAMES ${FFTW_MPI_NAMES}
-        PATHS ${FFTW3_DIR}
-        PATH_SUFFIXES lib
-        DOC "Directory where the FFTW3-MPI library is located"
-        NO_DEFAULT_PATH
-        )
-
-FIND_PATH(FFTW_INCLUDE_DIR fftw3.h
-        ${FFTW3_DIR} ${FFTW3_DIR}/include ${FFTW3_DIR}/lib )# /usr/local/include /usr/include /opt/local/lib )
-
-FIND_LIBRARY(FFTW_LIBRARY
-        NAMES ${FFTW_NAMES}
-        PATHS ${FFTW3_DIR} ${FFTW3_DIR}/include ${FFTW3_DIR}/lib )#/usr/lib /usr/local/lib /opt/locala/lib )
-
-# Find threads part of FFTW
-FIND_LIBRARY(FFTW_THREADS_LIBRARY
-        NAMES ${FFTW_THREADS_NAMES}
-        PATHS ${FFTW3_DIR} ${FFTW3_DIR}/include ${FFTW3_DIR}/lib )#/usr/lib /usr/local/lib /opt/local/lib )
-
-# Find MPI part of FFTW
-FIND_LIBRARY(FFTW_MPI_LIBRARY
-        NAMES ${FFTW_MPI_NAMES}
-        PATHS ${FFTW3_DIR} ${FFTW3_DIR}/include ${FFTW3_DIR}/lib )#/usr/lib /usr/local/lib /opt/local/lib )
-
-IF (FFTW_THREADS_LIBRARY AND FFTW_INCLUDE_DIR)
-    SET(FFTW_THREADS_LIBRARIES ${FFTW_THREADS_LIBRARY})
-    SET(FFTW_THREADS_FOUND "YES")
-ELSE (FFTW_THREADS_LIBRARY AND FFTW_INCLUDE_DIR)
-    SET(FFTW_THREADS_FOUND "NO")
-ENDIF (FFTW_THREADS_LIBRARY AND FFTW_INCLUDE_DIR)
-
-
-IF (FFTW_THREADS_FOUND)
-    IF (NOT FFTW_THREADS_FIND_QUIETLY)
-        MESSAGE(STATUS "Found FFTW threads: ${FFTW_THREADS_LIBRARIES}")
-    ENDIF (NOT FFTW_THREADS_FIND_QUIETLY)
-ELSE (FFTW_THREADS_FOUND)
-    IF (FFTW_THREADS_FIND_REQUIRED)
-        MESSAGE(FATAL_ERROR "Could not find FFTW threads library")
-    ENDIF (FFTW_THREADS_FIND_REQUIRED)
-ENDIF (FFTW_THREADS_FOUND)
-
-
-IF (FFTW_MPI_LIBRARY AND FFTW_INCLUDE_DIR)
-    SET(FFTW_MPI_LIBRARIES ${FFTW_MPI_LIBRARY})
-    SET(FFTW_MPI_FOUND "YES")
-ELSE (FFTW_MPI_LIBRARY AND FFTW_INCLUDE_DIR)
-    SET(FFTW_MPI_FOUND "NO")
-ENDIF (FFTW_MPI_LIBRARY AND FFTW_INCLUDE_DIR)
-
-
-IF (FFTW_MPI_FOUND)
-    IF (NOT FFTW_MPI_FIND_QUIETLY)
-        MESSAGE(STATUS "Found FFTW MPI: ${FFTW_MPI_LIBRARIES}")
-    ENDIF (NOT FFTW_MPI_FIND_QUIETLY)
-ELSE (FFTW_MPI_FOUND)
-    IF (FFTW_MPI_FIND_REQUIRED)
-        MESSAGE(FATAL_ERROR "Could not find FFTW MPI library")
-    ENDIF (FFTW_MPI_FIND_REQUIRED)
-ENDIF (FFTW_MPI_FOUND)
-
-
-IF (FFTW_LIBRARY AND FFTW_INCLUDE_DIR)
-    SET(FFTW_LIBRARIES ${FFTW_LIBRARY})
-    SET(FFTW_FOUND "YES")
-ELSE (FFTW_LIBRARY AND FFTW_INCLUDE_DIR)
-    SET(FFTW_FOUND "NO")
-ENDIF (FFTW_LIBRARY AND FFTW_INCLUDE_DIR)
-
-
-IF (FFTW_FOUND)
-    IF (NOT FFTW_FIND_QUIETLY)
-        MESSAGE(STATUS "Found FFTW: ${FFTW_LIBRARIES}")
-    ENDIF (NOT FFTW_FIND_QUIETLY)
-ELSE (FFTW_FOUND)
-    IF (FFTW_FIND_REQUIRED)
-        MESSAGE(FATAL_ERROR "Could not find FFTW library")
-    ENDIF (FFTW_FIND_REQUIRED)
-ENDIF (FFTW_FOUND)
-
-SET (ON_UNIX ${CMAKE_SYSTEM_NAME} STREQUAL "Linux" OR
-        ${CMAKE_SYSTEM_NAME} STREQUAL "Darwin")
-IF (${ON_UNIX})
-    SET (FFTW_EXECUTABLE_LIBRARIES fftw3f fftw3f_threads)
-ENDIF (${ON_UNIX})
-- 